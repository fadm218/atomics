attack_technique: T1140
display_name: Deobfuscate/Decode Files or Information
atomic_tests:
    - name: Deobfuscate/Decode Files Or Information
      item_id: T1140-1
      auto_generated_guid: dc6fe391-69e6-4506-bd06-ea5eeb4082f8
      description: |
        Encode/Decode executable
        Upon execution a file named T1140_calc_decoded.exe will be placed in the temp folder
      supported_platforms:
        - windows
      input_arguments:
        executable:
            description: name of executable
            type: path
            default: C:\Windows\System32\calc.exe
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            certutil -encode #{executable} %temp%\T1140_calc.txt
            certutil -decode %temp%\T1140_calc.txt %temp%\T1140_calc_decoded.exe
        cleanup_command: |
            del %temp%\T1140_calc.txt >nul 2>&1
            del %temp%\T1140_calc_decoded.exe >nul 2>&1
        name: command_prompt
        elevation_required: false
    - name: Certutil Rename and Decode
      item_id: T1140-2
      auto_generated_guid: 71abc534-3c05-4d0c-80f7-cbe93cb2aa94
      description: |
        Rename certutil and decode a file. This is in reference to latest research by FireEye [here](https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-japanese-corporations-using-updated-ttps.html)
      supported_platforms:
        - windows
      input_arguments:
        executable:
            description: name of executable/file to decode
            type: path
            default: C:\Windows\System32\calc.exe
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            copy %windir%\system32\certutil.exe %temp%\tcm.tmp
            %temp%\tcm.tmp -encode #{executable} %temp%\T1140_calc2.txt
            %temp%\tcm.tmp -decode %temp%\T1140_calc2.txt %temp%\T1140_calc2_decoded.exe
        cleanup_command: |
            del %temp%\tcm.tmp >nul 2>&1
            del %temp%\T1140_calc2.txt >nul 2>&1
            del %temp%\T1140_calc2_decoded.exe >nul 2>&1
        name: command_prompt
        elevation_required: false
    - name: Base64 decoding with Python
      item_id: T1140-3
      auto_generated_guid: 356dc0e8-684f-4428-bb94-9313998ad608
      description: |
        Use Python to decode a base64-encoded text string and echo it to the console
      supported_platforms:
        - linux
        - macos
      input_arguments:
        encoded_file:
            description: File to temporarily save encoded text
            type: path
            default: /tmp/AtomicPathFolder/program/T1140.encoded
        message:
            description: Message to print to the screen
            type: string
            default: Hello from Atomic Red Team test T1140!
      dependency_executor_name: ""
      dependencies:
        - description: |
            Python must be present
          prereq_command: |
            which python3
          get_prereq_command: |
            echo "Please install Python 3"
      executor:
        command: |
            ENCODED=$(python3 -c 'import base64;enc=base64.b64encode("#{message}".encode());print(enc.decode())')
            python3 -c "import base64;dec=base64.b64decode(\"$ENCODED\");print(dec.decode())"
            python3 -c "import base64 as d;dec=d.b64decode(\"$ENCODED\");print(dec.decode())"
            python3 -c "from base64 import b64decode;dec=b64decode(\"$ENCODED\");print(dec.decode())"
            python3 -c "from base64 import b64decode as d;dec=d(\"$ENCODED\");print(dec.decode())"
            echo $ENCODED | python3 -c "import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())"
            echo $ENCODED > #{encoded_file} && python3 -c "import base64;dec=base64.b64decode(open('#{encoded_file}').read());print(dec.decode())"
        cleanup_command: ""
        name: sh
        elevation_required: false
    - name: Base64 decoding with Perl
      item_id: T1140-4
      auto_generated_guid: 6604d964-b9f6-4d4b-8ce8-499829a14d0a
      description: |
        Use Perl to decode a base64-encoded text string and echo it to the console
      supported_platforms:
        - linux
        - macos
      input_arguments:
        encoded_file:
            description: File to temporarily save encoded text
            type: path
            default: /tmp/AtomicPathFolder/program/T1140.encoded
        message:
            description: Message to print to the screen
            type: string
            default: Hello from Atomic Red Team test T1140!
      dependency_executor_name: ""
      dependencies:
        - description: |
            Perl must be present
          prereq_command: |
            which perl
          get_prereq_command: |
            echo "Please install Perl"
      executor:
        command: |
            ENCODED=$(perl -e "use MIME::Base64;print(encode_base64('#{message}'));")
            perl -le "use MIME::Base64;print(decode_base64('$ENCODED'));"
            echo $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'
            echo $ENCODED > #{encoded_file} && perl -le 'use MIME::Base64;open($f,"<","#{encoded_file}");print(decode_base64(<$f>));'
        cleanup_command: ""
        name: sh
        elevation_required: false
    - name: Base64 decoding with shell utilities
      item_id: T1140-5
      auto_generated_guid: b4f6a567-a27a-41e5-b8ef-ac4b4008bb7e
      description: |
        Use common shell utilities to decode a base64-encoded text string and echo it to the console
      supported_platforms:
        - linux
        - macos
      input_arguments:
        encoded_file:
            description: File to temporarily save encoded text
            type: path
            default: /tmp/AtomicPathFolder/program/T1140.encoded
        message:
            description: Message to print to the screen
            type: string
            default: Hello from Atomic Red Team test T1140!
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            ENCODED=$(echo '#{message}' | base64)
            printf $ENCODED | base64 -d
            echo $ENCODED | base64 -d
            echo $(echo $ENCODED) | base64 -d
            echo $ENCODED > #{encoded_file} && base64 -d #{encoded_file}
            echo $ENCODED > #{encoded_file} && base64 -d < #{encoded_file}
            echo $ENCODED > #{encoded_file} && cat #{encoded_file} | base64 -d
            echo $ENCODED > #{encoded_file} && cat < #{encoded_file} | base64 -d
            bash -c "{echo,\"$(echo $ENCODED)\"}|{base64,-d}"
        cleanup_command: ""
        name: sh
        elevation_required: false
    - name: Hex decoding with shell utilities
      item_id: T1140-6
      auto_generated_guid: 005943f9-8dd5-4349-8b46-0313c0a9f973
      description: |
        Use common shell utilities to decode a hex-encoded text string and echo it to the console
      supported_platforms:
        - linux
        - macos
      input_arguments:
        encoded_file:
            description: File to temporarily save encoded text
            type: path
            default: /tmp/AtomicPathFolder/program/T1140.encoded
        message:
            description: Message to print to the screen
            type: string
            default: Hello from Atomic Red Team test T1140!
      dependency_executor_name: ""
      dependencies:
        - description: |
            xxd must be present
          prereq_command: |
            which xxd
          get_prereq_command: |
            echo "Please install xxd"
      executor:
        command: |
            ENCODED=$(echo '#{message}' | xxd -ps -c 256)
            printf $ENCODED | xxd -r -p
            echo $ENCODED | xxd -r -p
            echo $(echo $ENCODED) | xxd -r -p
            echo $ENCODED > #{encoded_file} && xxd -r -p #{encoded_file}
            echo $ENCODED > #{encoded_file} && xxd -r -p < #{encoded_file}
            echo $ENCODED > #{encoded_file} && cat #{encoded_file} | xxd -r -p
            echo $ENCODED > #{encoded_file} && cat < #{encoded_file} | xxd -r -p
        cleanup_command: ""
        name: sh
        elevation_required: false
    - name: Linux Base64 Encoded Shebang in CLI
      item_id: T1140-7
      auto_generated_guid: 3a15c372-67c1-4430-ac8e-ec06d641ce4d
      description: "Using Linux Base64 Encoded shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. \n"
      supported_platforms:
        - linux
        - macos
      input_arguments:
        bash_encoded:
            description: Encoded
            type: string
            default: IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo=
        dash_encoded:
            description: Encoded
            type: string
            default: IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo=
        fish_encoded:
            description: Encoded
            type: string
            default: IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo=
        sh_encoded:
            description: Encoded
            type: string
            default: IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK
      dependency_executor_name: ""
      dependencies:
        - description: |
            base64 must be present
          prereq_command: |
            which base64
          get_prereq_command: |
            echo "please install base64"
      executor:
        command: |
            echo #{bash_encoded} | base64 -d | bash
            echo #{dash_encoded} | base64 -d | bash
            echo #{fish_encoded} | base64 -d | bash
            echo #{sh_encoded} | base64 -d | bash
        cleanup_command: ""
        name: sh
        elevation_required: false
