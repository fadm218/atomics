attack_technique: T1098
display_name: Account Manipulation
atomic_tests:
    - name: Admin Account Manipulate
      item_id: T1098-1
      auto_generated_guid: 5598f7cb-cf43-455e-883a-f6008c5d46af
      description: |
        Manipulate Admin Account Name
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            $x = Get-Random -Minimum 2 -Maximum 9999
            $y = Get-Random -Minimum 2 -Maximum 9999
            $z = Get-Random -Minimum 2 -Maximum 9999
            $w = Get-Random -Minimum 2 -Maximum 9999
            Write-Host HaHa_$x$y$z

            $fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match "User" -and $_.PrincipalSource -match "Local"} | Select Name

            foreach($member in $fmm) {
                if($member -like "*Administrator*") {
                    $account = $member.Name -replace ".+\\\","" # strip computername\
                    $originalDescription = (Get-LocalUser -Name $account).Description
                    Set-LocalUser -Name $account -Description "atr:$account;$originalDescription".Substring(0,48) # Keep original name in description
                    Rename-LocalUser -Name $account -NewName "HaHa_$x$y$z" # Required due to length limitation
                    Write-Host "Successfully Renamed $account Account on " $Env:COMPUTERNAME
                    }
                }
        cleanup_command: |
            $list = Get-LocalUser |?{$_.Description -like "atr:*"}
            foreach($u in $list) {
              $u.Description -match "atr:(?<Name>[^;]+);(?<Description>.*)"
              Set-LocalUser -Name $u.Name -Description $Matches.Description
              Rename-LocalUser -Name $u.Name -NewName $Matches.Name
              Write-Host "Successfully Reverted Account $($u.Name) to $($Matches.Name) on " $Env:COMPUTERNAME
            }
        name: powershell
        elevation_required: true
    - name: Domain Account and Group Manipulate
      item_id: T1098-2
      auto_generated_guid: a55a22e9-a3d3-42ce-bd48-2653adb8f7a9
      description: "Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). \n\nThe quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to \ncreate the user and alter the group. Automatic installation of the dependency requires an elevated session, \nand is unlikely to work with Powershell Core (untested).\n\nIf you consider running this test against a production Active Directory, the good practise is to create a dedicated\nservice account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\" -InputArgs @{\"group\" = \"DNSAdmins\" }`\n"
      supported_platforms:
        - windows
      input_arguments:
        account_prefix:
            description: |
                Prefix string of the random username (by default, atr-). Because the cleanup deletes such account based on
                a match `(&(samaccountname=#{account_prefix}-*)(givenName=Test))`, if you are to change it, be careful.
            type: string
            default: atr-
        create_args:
            description: Additional string appended to New-ADUser call
            type: string
            default: ""
        group:
            description: Name of the group to alter
            type: string
            default: Domain Admins
      dependency_executor_name: ""
      dependencies:
        - description: |
            PS Module ActiveDirectory
          prereq_command: "Try {\n    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null\n    exit 0\n} \nCatch {\n    exit 1\n}\n"
          get_prereq_command: |
            if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {
              Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online
            } else {
              Install-WindowsFeature RSAT-AD-PowerShell
            }
      executor:
        command: |
            $x = Get-Random -Minimum 2 -Maximum 99
            $y = Get-Random -Minimum 2 -Maximum 99
            $z = Get-Random -Minimum 2 -Maximum 99
            $w = Get-Random -Minimum 2 -Maximum 99

            Import-Module ActiveDirectory
            $account = "#{account_prefix}-$x$y$z"
            New-ADUser -Name $account -GivenName "Test" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}
            Add-ADGroupMember "#{group}" $account
        cleanup_command: |
            Get-ADUser -LDAPFilter "(&(samaccountname=#{account_prefix}-*)(givenName=Test))" | Remove-ADUser -Confirm:$False
        name: powershell
        elevation_required: false
    - name: AWS - Create a group and add a user to that group
      item_id: T1098-3
      auto_generated_guid: 8822c3b0-d9f9-4daf-a043-49f110a31122
      description: |
        Adversaries create AWS group, add users to specific to that group to elevate their privilieges to gain more accesss
      supported_platforms:
        - iaas:aws
      input_arguments:
        username:
            description: Name of the AWS group to create
            type: string
            default: atomicredteam
      dependency_executor_name: ""
      dependencies:
        - description: |
            Check if the user exists, we can only add a user to a group if the user exists.
          prereq_command: |
            aws iam list-users | grep #{username}
          get_prereq_command: |
            echo Please run atomic test T1136.003, before running this atomic test
      executor:
        command: |
            aws iam create-group --group-name #{username}
            aws iam add-user-to-group --user-name #{username} --group-name #{username}
        cleanup_command: |
            aws iam remove-user-from-group --user-name #{username} --group-name #{username}
            aws iam delete-group --group-name #{username}
        name: sh
        elevation_required: false
    - name: Azure AD - adding user to Azure AD role
      item_id: T1098-4
      auto_generated_guid: 0e65ae27-5385-46b4-98ac-607a8ee82261
      description: "The adversaries want to add user to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to the user principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see User as a type.\n"
      supported_platforms:
        - azure-ad
      input_arguments:
        password:
            description: Azure AD password
            type: string
            default: p4sswd
        role_name:
            description: Name of the targeted Azure AD role
            type: string
            default: Global Reader
        user_principal_name:
            description: Display Name, or User Principal Name, of the targeted user principal
            type: string
            default: SuperUser
        username:
            description: Azure AD username
            type: string
            default: jonh@contoso.com
      dependency_executor_name: ""
      dependencies:
        - description: |
            AzureAD module must be installed.
          prereq_command: |
            try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}
          get_prereq_command: |
            Install-Module -Name AzureAD -Force
      executor:
        command: |
            Import-Module -Name AzureAD
            $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword
            Connect-AzureAD -Credential $Credential

            $user = Get-AzureADUser -Filter "DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'"
            if ($user -eq $null) { Write-Warning "User not found"; exit }
            $role = Get-AzureADDirectoryRole -Filter "DisplayName eq '#{role_name}'"
            if ($role -eq $null) { Write-Warning "Role not found"; exit }
            Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId
            Write-Host "User $($user.DisplayName) was added to $($role.DisplayName) role"
        cleanup_command: |
            Import-Module -Name AzureAD -ErrorAction Ignore
            $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword
            Connect-AzureAD -Credential $Credential -ErrorAction Ignore

            $user = Get-AzureADUser -Filter "DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'"
            if ($user -eq $null) { Write-Warning "User not found"; exit }
            $role = Get-AzureADDirectoryRole -Filter "DisplayName eq '#{role_name}'"
            if ($role -eq $null) { Write-Warning "Role not found"; exit }

            Remove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $user.ObjectId
            Write-Host "User $($user.DisplayName) was removed from $($role.DisplayName) role"
        name: powershell
        elevation_required: false
    - name: Azure AD - adding service principal to Azure AD role
      item_id: T1098-5
      auto_generated_guid: 92c40b3f-c406-4d1f-8d2b-c039bf5009e4
      description: "The adversaries want to add service principal to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to service principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see Service Principal as a type.\n"
      supported_platforms:
        - azure-ad
      input_arguments:
        password:
            description: Azure AD password
            type: string
            default: p4sswd
        role_name:
            description: Name of the targeted Azure AD role
            type: string
            default: Global Reader
        service_principal_name:
            description: Name of the service principal
            type: string
            default: SuperSP
        username:
            description: Azure AD username
            type: string
            default: jonh@contoso.com
      dependency_executor_name: ""
      dependencies:
        - description: |
            AzureAD module must be installed.
          prereq_command: |
            try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}
          get_prereq_command: |
            Install-Module -Name AzureAD -Force
      executor:
        command: |
            Import-Module -Name AzureAD
            $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword
            Connect-AzureAD -Credential $Credential

            $sp = Get-AzureADServicePrincipal -Filter "DisplayName eq '#{service_principal_name}'"
            if ($sp -eq $null) { Write-Warning "Service Principal not found"; exit }
            $role = Get-AzureADDirectoryRole -Filter "DisplayName eq '#{role_name}'"
            if ($role -eq $null) { Write-Warning "Role not found"; exit }
            Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId
            Write-Host "Service Principal $($sp.DisplayName) was added to $($role.DisplayName)"
        cleanup_command: |
            Import-Module -Name AzureAD -ErrorAction Ignore
            $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword
            Connect-AzureAD -Credential $Credential -ErrorAction Ignore

            $sp = Get-AzureADServicePrincipal -Filter "DisplayName eq '#{service_principal_name}'"
            if ($sp -eq $null) { Write-Warning "Service Principal not found"; exit }
            $role = Get-AzureADDirectoryRole -Filter "DisplayName eq '#{role_name}'"
            if ($role -eq $null) { Write-Warning "Role not found"; exit }

            Remove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $sp.ObjectId
            Write-Host "Service Principal $($sp.DisplayName) was removed from $($role.DisplayName) role"
        name: powershell
        elevation_required: false
    - name: Azure - adding user to Azure role in subscription
      item_id: T1098-6
      auto_generated_guid: 1a94b3fc-b080-450a-b3d8-6d9b57b472ea
      description: "The adversaries want to add user to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to user in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n"
      supported_platforms:
        - iaas:azure
      input_arguments:
        password:
            description: Azure AD password
            type: string
            default: p4sswd
        role_name:
            description: Name of the targeted Azure role
            type: string
            default: Reader
        subscription:
            description: Name of the targeted subscription
            type: string
            default: Azure subscription 1
        user_principal_name:
            description: Display Name, or User Principal Name, of the targeted user principal
            type: string
            default: SuperUser
        username:
            description: Azure AD username
            type: string
            default: jonh@contoso.com
      dependency_executor_name: ""
      dependencies:
        - description: |
            Az.Resources module must be installed.
          prereq_command: |
            try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}
          get_prereq_command: |
            Install-Module -Name Az.Resources -Force
      executor:
        command: |
            Import-Module -Name Az.Resources
            $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword
            Connect-AzAccount -Credential $Credential

            $user = Get-AzADUser | where-object {$_.DisplayName -eq "#{user_principal_name}" -or $_.UserPrincipalName -eq "#{user_principal_name}" }
            if ($user -eq $null) { Write-Warning "User not found"; exit }
            $subscription = Get-AzSubscription | where-object {$_.Name -eq "#{subscription}"}
            if ($subscription -eq $null) { Write-Warning "Subscription not found"; exit }
            $role = Get-AzRoleDefinition | where-object {$_.Name -eq "#{role_name}"}
            if ($role -eq $null) { Write-Warning "Role not found"; exit }

            New-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription
            Write-Host "User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)"
        cleanup_command: |
            Import-Module -Name AzureAD -ErrorAction Ignore
            $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword
            Connect-AzAccount -Credential $Credential -ErrorAction Ignore

            $user = Get-AzADUser | where-object {$_.DisplayName -eq "#{user_principal_name}" -or $_.UserPrincipalName -eq "#{user_principal_name}" }
            if ($user -eq $null) { Write-Warning "User not found"; exit }
            $subscription = Get-AzSubscription | where-object {$_.Name -eq "#{subscription}"}
            if ($subscription -eq $null) { Write-Warning "Subscription not found"; exit }
            $role = Get-AzRoleDefinition | where-object {$_.Name -eq "#{role_name}"}
            if ($role -eq $null) { Write-Warning "Role not found"; exit }

            Remove-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription
            Write-Host "User Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)"
        name: powershell
        elevation_required: false
    - name: Azure - adding service principal to Azure role in subscription
      item_id: T1098-7
      auto_generated_guid: c8f4bc29-a151-48da-b3be-4680af56f404
      description: "The adversaries want to add service principal to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to service principal in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n"
      supported_platforms:
        - iaas:azure
      input_arguments:
        password:
            description: Azure AD password
            type: string
            default: p4sswd
        role_name:
            description: Name of the targeted Azure role
            type: string
            default: Reader
        service_principal_name:
            description: Name of the service principal
            type: string
            default: SuperSP
        subscription:
            description: Name of the targeted subscription
            type: string
            default: Azure subscription 1
        username:
            description: Azure AD username
            type: string
            default: jonh@contoso.com
      dependency_executor_name: ""
      dependencies:
        - description: |
            Az.Resources module must be installed.
          prereq_command: |
            try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}
          get_prereq_command: |
            Install-Module -Name Az.Resources -Force
      executor:
        command: "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"#{service_principal_name}\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"} \nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n"
        cleanup_command: "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential -ErrorAction Ignore\n\n$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"#{service_principal_name}\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"} \nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"Service Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\"\n"
        name: powershell
        elevation_required: false
    - name: Azure AD - adding permission to application
      item_id: T1098-8
      auto_generated_guid: 94ea9cc3-81f9-4111-8dde-3fb54f36af4b
      description: |
        The adversaries want to add permission to newly created application. Application could be then used for persistence or for further operation in the attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory in particular can be a valuable target for a threat actor.
        This technique will create a new app, with the provided name, and give it the provided permission. But if you prefer to add credentials to an existing app, replace in the code: "Get-AzureADApplication" instead of "New-AzureADServicePrincipal".
        The DirectoryRecommendations.Read.All permissions has been selected as the default.

        The account you use to run the PowerShell command should have Global Administrator/Application Administrator/Cloud Application Administrator role in your Azure AD.

        Detection hint - check Operation Name "Add app role assignment to service principal" in subscriptions Activity Logs.
        You can also take a look at the materials:
        https://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/
        https://github.com/reprise99/Sentinel-Queries
        https://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766
        https://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb
      supported_platforms:
        - azure-ad
      input_arguments:
        application_name:
            description: Name of the targeted application that will be created
            type: string
            default: test_app
        application_permission:
            description: Permission from Microsoft Graph Resource API that will be added to application
            type: string
            default: DirectoryRecommendations.Read.All
        password:
            description: Azure AD password
            type: string
            default: p4sswd
        username:
            description: Azure AD username
            type: string
            default: jonh@contoso.com
      dependency_executor_name: ""
      dependencies:
        - description: |
            AzureAD module must be installed.
          prereq_command: |
            try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}
          get_prereq_command: |
            Install-Module -Name AzureAD -Force
      executor:
        command: "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = New-AzureADApplication -DisplayName \"#{application_name}\"\n$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId\n#$aadApplication = Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\"\n\n#Get Service Principal of Microsoft Graph Resource API \n$graphSP = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n\n#Initialize RequiredResourceAccess for Microsoft Graph Resource API \n$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess\n$requiredGraphAccess.ResourceAppId = $graphSP.AppId\n$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]\n\n#Set Application Permissions\n$ApplicationPermissions = @('#{application_permission}')\n\n$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}\nif($reqPermission)\n{\n$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess\n$resourceAccess.Type = \"Role\"\n$resourceAccess.Id = $reqPermission.Id    \n#Add required app permission\n$requiredGraphAccess.ResourceAccess.Add($resourceAccess)\n}\nelse\n{\nWrite-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red\n}\n\n#Add required resource accesses\n$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]\n$requiredResourcesAccess.Add($requiredGraphAccess)\n\n#Set permissions in existing Azure AD App\nSet-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess\n\n$servicePrincipal = Get-AzureADServicePrincipal -Filter \"AppId eq '$($aadApplication.AppId)'\"\n\nNew-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id\n"
        cleanup_command: |
            Import-Module -Name AzureAD
            $PWord = ConvertTo-SecureString -String "#{password}" -AsPlainText -Force
            $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "#{username}", $Pword
            Connect-AzureAD -Credential $Credential

            $aadApplication = @(Get-AzureADApplication -Filter "DisplayName eq '#{application_name}'")
            If ($aadApplication.Count -eq 0)
            {
              Write-Host "App not found: cannot delete it"
              exit
            }
            ElseIf ($aadApplication.Count -gt 1)
            {
              Write-Host "Found several app with name '#{application_name}': one is likely the one this technique created, but as a precaution, none will be deleted. Manual cleanup is required."
              exit
            }
            Else
            {
              Remove-AzureADApplication -ObjectId $aadApplication[0].ObjectId
              Write-Host "Successfully deleted app"
            }
        name: powershell
        elevation_required: false
    - name: Password Change on Directory Service Restore Mode (DSRM) Account
      item_id: T1098-9
      auto_generated_guid: d5b886d9-d1c7-4b6e-a7b0-460041bf2823
      description: |
        Change the password on the Directory Service Restore Mode (DSRM) account using ntdsutil by syncing to existing account
      supported_platforms:
        - windows
      input_arguments:
        sync_account:
            description: Account to sync password from
            type: string
            default: '%username%'
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            ntdsutil "set dsrm password" "sync from domain account #{sync_account}" "q" "q"
        cleanup_command: ""
        name: command_prompt
        elevation_required: true
